## Creational Patterns Homework ##
- Select 3 creational design patterns
 - Write a short description (about half page) for each of them 
     - Describe their motivation, intent, applicability, known uses, implementation, participants, consequences, structure, related patterns, etc.
     - Use Markdown for the description (.md files) and upload it on your own GitHub
     - Prefer Bulgarian language
 - Provide your own C# examples for their use
 - Provide a UML diagram or image of the pattern

### Builder pattern ###
Строител (Builder) е създаващ шаблон за дизайн. За разлика от методите абстрактна и метод фабрика, които имат за цел да усигорят полиморфизъм, Строител има за цел да реши проблемите с телескопичния конструктор (telescoping constructor anti-pattern), който възниква, когато увеличението на комбинациите от параметри в конструктора води до експоненциален списък на конструктори. Вместо използването на много конструктори, шаблонът използва обект, строител, който получава параметрите един по един и връща готовият обект.

Шаблонът има и друго предимство. Може да бъде използван за обекти, които съдържат информация, която трудно може да се промени (html код, SQL заявка). Този вид данни не могат да бъдат редактирани стъпка по стъпка, а трябва да бъдат обработени на веднъж. Най-добрият вариант за изработване на такъв обект, е чрез използване на строител.
Целта на този шаблон е да раздели създаването на сложни обекти от тяхното представяне. По този начин процесът на създаване може да имплементира различни видове обекти.

Строител (Builder pattern) често изгражда Компоситор (Composite pattern). Често, проекти започват с помощта на шаблона Фабрика Метод (Factory Method), като по-прост и адаптивен и се развиват към Абстрактна Фабрика (Abstract Factory), Прототип  (Prototype), или Строител (Builder) (по-гъвкави, по-сложни), където е необходима по-голяма гъвкавост. Понякога създаващите шаблони се допълват: Builder може да използва един от другите модели за имплементиране на различни обекти.

### Prototype pattern ###
Прототип (Prototype) е създаващ шаблон за дизайн. Използва се когато типът на обект е определен от прототипна инстанция, която се копира, за да се създаде нов обект. Използва се за да:

- избегне подкласове на създаващ обекти клас в клиентското приложение, както прави абстрактната фабрика (Abstract factory).

- избегне създаването на нов обект чрез ключовата дума "new" защото тя е скъпа за дадено приложение.

Има случаи, в които шаблоните прототип и абстрактна фабрика могат да се заменят едно с друго. В други случай те се допълват като абстрактната фабрика може да съдържа списък от прототипи, които да се клонират и да се връщат от фабриката. Абстрактната фабрики често използва Factory Method за създаване на своито обекти (чрез наследяване), но може да използва и прототип (чрез делегиране).

### Object Pool Design Pattern ###
Басейн от обект (Object Pool) може да предложи значително увеличение на производителността. Най-голяма ефективност има в ситуациите, където цената на инициализация на инстанция от клас е голяма, инициализират се много инстанции от даден клас и броят на инстациите, които се използват е малък. 

Басейн от обект (иначе известни като ресурсен басейн) се използва  за управление на кеширането на обекти. Клиент с достъп до басейна с обекти може да пропусне създаването на нов обект, като пита басейна дали съдържа такъв обект, който да бъде използван. Като цяло басейна винаги ще расте, т.е. ако е празен, басейна сам създава обектите си или ние можем да имаме басейн, който да ограничава броя на създадените обекти.

Препоръчително е всички ресурсни обекти, които не се използват да бъдат запазени в един и същ обектен басейн, за да могат лесно да се манипулират. За да се постигне този ефект обектния басейн се създава като Singleton.